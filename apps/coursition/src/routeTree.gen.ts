/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EditorImport } from './routes/editor'
import { Route as IndexImport } from './routes/index'
import { Route as MediaImport } from './routes/media'
import { Route as PpImport } from './routes/pp'
import { Route as TosImport } from './routes/tos'

// Create/Update Routes

const TosRoute = TosImport.update({
  id: '/tos',
  path: '/tos',
  getParentRoute: () => rootRoute,
} as any)

const PpRoute = PpImport.update({
  id: '/pp',
  path: '/pp',
  getParentRoute: () => rootRoute,
} as any)

const MediaRoute = MediaImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => rootRoute,
} as any)

const EditorRoute = EditorImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/editor': {
      id: '/editor'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorImport
      parentRoute: typeof rootRoute
    }
    '/media': {
      id: '/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaImport
      parentRoute: typeof rootRoute
    }
    '/pp': {
      id: '/pp'
      path: '/pp'
      fullPath: '/pp'
      preLoaderRoute: typeof PpImport
      parentRoute: typeof rootRoute
    }
    '/tos': {
      id: '/tos'
      path: '/tos'
      fullPath: '/tos'
      preLoaderRoute: typeof TosImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/editor': typeof EditorRoute
  '/media': typeof MediaRoute
  '/pp': typeof PpRoute
  '/tos': typeof TosRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/editor': typeof EditorRoute
  '/media': typeof MediaRoute
  '/pp': typeof PpRoute
  '/tos': typeof TosRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/editor': typeof EditorRoute
  '/media': typeof MediaRoute
  '/pp': typeof PpRoute
  '/tos': typeof TosRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/editor' | '/media' | '/pp' | '/tos'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/editor' | '/media' | '/pp' | '/tos'
  id: '__root__' | '/' | '/editor' | '/media' | '/pp' | '/tos'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EditorRoute: typeof EditorRoute
  MediaRoute: typeof MediaRoute
  PpRoute: typeof PpRoute
  TosRoute: typeof TosRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EditorRoute: EditorRoute,
  MediaRoute: MediaRoute,
  PpRoute: PpRoute,
  TosRoute: TosRoute,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/editor",
        "/media",
        "/pp",
        "/tos"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/editor": {
      "filePath": "editor.tsx"
    },
    "/media": {
      "filePath": "media.tsx"
    },
    "/pp": {
      "filePath": "pp.tsx"
    },
    "/tos": {
      "filePath": "tos.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
